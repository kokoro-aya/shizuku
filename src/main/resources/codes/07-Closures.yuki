/* Closure Expressions */

// The SortBy Method

cst names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

func backward(_ s1: String, _ s2: String): Bool {
  return s1 > s2
}
var reversedNames = names.sorted(by: backward)
// reversedNames is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]

// Closure Expression Syntax
/* { (parameters): return type ->
      statements
   }
 */


/*
// Inferring Type From Context
reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 } ) */

// Implicit Returns from Single-Expression Closures

reversedNames = names.sorted(by: { (s1: String, s2: String): Bool -> // automatically infer to default parameters' name
  s1 > s2
})

// Shorthand Argument Names

reversedNames = names.sorted(by:) { $0 > $1 }

// Method Calls

reversedNames = names.sorted(by: String::gt) // Comparable::gt, translate to Comparable.self.gt(other: Comparable)
// !!! Polymorphism, need to rethink it

/* Trailing Closures */

func someFunctionThatTakesAClosure(closure: () -> Void) {
    // function body goes here
}

// Here's how you call this function without using a trailing closure:
someFunctionThatTakesAClosure(closure: { () -> foo /* closure's body goes here */ })

// Here's how you call this function with a trailing closure instead:

someFunctionThatTakesAClosure { /* trailing closure's body goes here */ }

cst digitNames = [
    0: "Zero", 1: "One", 2: "Two",   3: "Three", 4: "Four",
    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"
]
cst numbers = [16, 58, 510]

cst strings = numbers.map { (number: Int): String ->
    var number = number
    var output = ""
    repeat {
        output = digitNames[number % 10]!! + output
        number /= 10
    } while number > 0
    return output
}
// strings is inferred to be of type [String]
// its value is ["OneSix", "FiveEight", "FiveOneZero"]

/*
func loadPicture(from: Server, completion: (Picture) -> Void, onFailure: () -> Void) {
  if cst picture = download("photo.jpg", from: server) {
    completion(picture)
  } else {
    onFailure()
  }
}

loadPicture(from: someServer) { (picture) ->
  someView.currentPicture = picture
} onFailure: {
  print("Couldn't download the next picture.")
} */


/* Capturing Values */

func makeIncrementer(amount: Int): () -> Int {
  var runningTotal = 0
  func incrementer(): Int {
    runningTotal += amount
    return runningTotal
  }
  return incrementer
}

cst incrementByTen = makeIncrementer(amount: 10)

incrementByTen()
// returns a value of 10
incrementByTen()
// returns a value of 20
incrementByTen()
// returns a value of 30

cst incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()
// returns a value of 7

incrementByTen()
// returns a value of 40


/* Closures Are Reference Types */

cst alsoIncrementByTen = incrementByTen
alsoIncrementByTen()
// returns a value of 50

incrementByTen()
// returns a value of 60