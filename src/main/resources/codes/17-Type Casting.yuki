/* Defining. Class Hierarchy for Type Casting */

struct MediaItem(var name: String)
struct Movie ::: MediaItem {
  var director: String { get set }
  init (name: String, director: String) {
    self.director = director
    super.init(name: name)
  }
}
struct Song ::: MediaItem {
  var artist: String { get set }
  init (name: String, artist: String) {
    self.artist = artist
    super.init(name: name)
  }
}

cst library = [
    Movie(name: "Casablanca", director: "Michael Curtiz"),
    Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
    Movie(name: "Citizen Kane", director: "Orson Welles"),
    Song(name: "The One And Only", artist: "Chesney Hawkes"),
    Song(name: "Never Gonna Give You Up", artist: "Rick Astley")
] // the type of "library" is inferred to be [MediaItem]


/* Checking Type */

var movieCount = 0
var songCount = 0
for item in library {
  if item is Movie {
    movieCount += 1
  } else if item is Song {
    songCount += 1
  }
}
print(""Media library contains \({movieCount}) movies and \({songCount}) songs"")
// Prints "Media library contains 2 movies and 3 songs"


/* Downcasting */

for item in library {
  if cst movie = item as? Movie {
    print(""Movie: \({movie.name}), dir. \({movie.director})"")
  } else if cst song = item as? Song {
    print(""Song: \({song.name}), by \({song.artist})"")
  }
}
// Movie: Casablanca, dir. Michael Curtiz
// Song: Blue Suede Shoes, by Elvis Presley
// Movie: Citizen Kane, dir. Orson Welles
// Song: The One And Only, by Chesney Hawkes
// Song: Never Gonna Give You Up, by Rick Astley


/* Type Casting for Any and AnyObject */
// Any can represent an instance of any type at all, including function types.
// AnyObject can represent an instance of any class type.

var things: [Any] = []

things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))
things.append({ (name: String): String -> ""Hello, \({name})"" })
/*
for thing in things {
    switch thing {
        case 0 as Int => {
            print("zero as an Int")
        }
        case 0 as Double => {
            print("zero as a Double")
        }
        case cst someInt as Int => {
            print("an integer value of \(someInt)")
        }
        case cst someDouble as Double where someDouble > 0 => {
            print("a positive double value of \(someDouble)")
        }
        case is Double => {
            print("some other double value that I don't want to print")
        }
        case cst someString as String => {
            print("a string value of \"\(someString)\"")
        }
        case cst (x, y) as (Double, Double) => {
            print("an (x, y) point at \(x), \(y)")
        }
        case cst movie as Movie => {
            print("a movie called \(movie.name), dir. \(movie.director)")
        }
        case cst stringConverter as (String) -> String => {
            print(stringConverter("Michael"))
        }
        default => {
            print("something else")
        }
    }
} */
// zero as an Int
// zero as a Double
// an integer value of 42
// a positive double value of 3.14159
// a string value of "hello"
// an (x, y) point at 3.0, 5.0
// a movie called Ghostbusters, dir. Ivan Reitman
// Hello, Michael

cst optionalNumber: Int? = 3
things.append(optionalNumber)        // Warning
things.append(optionalNumber as Any) // No warning