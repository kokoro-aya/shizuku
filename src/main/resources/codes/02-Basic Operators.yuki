/* Assignment Operator */

cst b = 10
var a = 5
a = b
// a is now equal to 10

cst (x, y) = Pair(1, 2)
// x is equal to 1, and y is equal to 2

if x = y {
    // This isn't valid, because x = y doesn't return a value
}


/* Arithmetic Operators */

1 + 2 // equals 3
5 - 3 // equals 2
2 * 3 // equals 6
10.0 / 2.5 // equals 4.0

"hello, " + "world" // equals "hello, world"
"hello, " ++ "world"

9 % 4 // equals 1
-9 % 4 // equals -1

cst three = 3
cst minusThree = -three
cst plusThree = -minusThree

cst minusSix = -6
cst alsoMinusSix = +minusSix


/* Compound Assignment Operators */

var a = 1
a += 2


/* Comparison Operators */
/*
 Equal to (a == b)
 Not equal to (a != b)
 Greater than (a > b)
 Less than (a < b)
 Greater than or equal to (a >= b)
 Less than or equal to (a <= b)
 Identical to (a ~= b) compares the addresses of two operands
 */

1 == 1
2 != 1
2 > 1
1 < 2
1 >= 1
2 <= 1

cst name = "world"
if name == "world" {
    print("hello, world")
} else {
    print("I'm sorry", name, ", but I don't recognize you")
}
// Prints "hello, world", because name is indeed equal to "world".

/*
 (1, "zebra") < (2, "apple")   // true because 1 is less than 2; "zebra" and "apple" aren't compared
 (3, "apple") < (3, "bird")    // true because 3 is equal to 3, and "apple" is less than "bird"
 (4, "dog") == (4, "dog")      // true because 4 is equal to 4, and "dog" is equal to "dog"
 */
/*
 ("blue", -1) < ("purple", 1)        // OK, evaluates to true
 ("blue", false) < ("purple", true)  // Error because < can't compare Boolean values
 */


/* Ternary Conditional Operator */

cst contentHeight = 40
cst hasHeader = true
cst rowHeight = contentHeight + (hasHeader ? 50 : 20)
// rowHeight is equal to 90


/* Nil Coalescing Operator */

a != nil ? a!! : b

cst defaultColorName = "red"
var userDefinedColorName: String?   // defaults to nil

var colorNameToUse = userDefinedColorName ?: defaultColorName
// userDefinedColorName is nil, so colorNameToUse is set to the default of "red"

userDefinedColorName = "green"
colorNameToUse = userDefinedColorName ?: defaultColorName
// userDefinedColorName isn't nil, so colorNameToUse is set to "green"


/* Range Operators */

for index in 1 ... 5 {
    print(""\({index}) times 5 is \({index * 5})"")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25

cst names = ["Anna", "Alex", "Brian", "Jack"]
cst count = names.count
for i in 0 ..< count {
    print(""Person \({i + 1}) is called \({names[i]})"")
}
// Person 1 is called Anna
// Person 2 is called Alex
// Person 3 is called Brian
// Person 4 is called Jack

for i in 1 ... 5 @ 2 {
    print(i, "times 5 is", i * 5)
}
for i in 5 >.. 1 @ 2 {
    print(i, "times 5 is", i * 5)
}
for i in 5 >>. 0 @ 2 {
    print(i, "times 5 is", i * 5)
}

/* Array Slices */

for name in names[2..] {
    print(name) // Brian Jack
}

for name in names[..2] {
    print(name) // Anna Alex
}

print(name[^2])

for name in names[^3..] {
    print(name)
}

for name in names[..^1] {
    print(name)
}

for name in names[^3..^1] {
    print(name)
}

cst range = 0 ... 5
range.contains(7)
range.contains(4)
range.contains(-1)


/* Logical Operators */

cst allowedEntry = false
if !allowedEntry {
    print("ACCESS DENIED")
}

cst enteredDoorCode = true
cst passedRetinaScan = false
if enteredDoorCode && passedRetinaScan {
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}

cst hasDoorKey = false
cst knowsOverridePassword = true
if hasDoorKey || knowsOverridePassword {
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}

if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}

if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}
