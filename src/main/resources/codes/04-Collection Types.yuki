/* Arrays */

// Creating an Empty Array

var someInts: [Int] = []
print(""someInts is of type [Int] with \({someInts.size}) items."")
// Prints "someInts is of type [Int] with 0 items."

someInts.append(3)
// someInts now contains 1 value of type Int
someInts = []
// someInts is now an empty array, but is still of type [Int]

// Creating an Array with a Default Value

var threeDoubles = Array(repeating: 0.0, count: 3)
// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]

// Creating an Array by Adding Two Array Together

var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]

var sixDoubles = threeDoubles + anotherThreeDoubles
// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]

// Creating an Array with an Array Literal

var shoppingList: [String] = ["Eggs", "Milk"]
// shoppingList has been initialized with two initial items

var shoppingList = ["Eggs", "Milk"]

// Accessing and Modifying an Array

print(""The shopping list contains \({shoppingList.size}) items."")
// Prints "The shopping list contains 2 items."

if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list isn't empty.")
}
// Prints "The shopping list isn't empty."

shoppingList.append("Flour")
// shoppingList now contains 3 items, and someone is making pancakes

shoppingList += ["Baking Powder"]
// shoppingList now contains 4 items
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
// shoppingList now contains 7 items

var firstItem = shoppingList[0]
// firstItem is equal to "Eggs"

shoppingList[0] = "Six eggs"
// the first item in the list is now equal to "Six eggs" rather than "Eggs"

shoppingList[4..6] = ["Bananas", "Apples"]
// shoppingList now contains 6 items

shoppingList.put(0, "Maple Syrup")
shoppingList[0] = "Maple Syrup"
// shoppingList now contains 7 items
// "Maple Syrup" is now the first item in the list

cst mapleSyrup = shoppingList.pop(at: 0)
// the item that was at index 0 has just been removed
// shoppingList now contains 6 items, and no Maple Syrup
// the mapleSyrup constant is now equal to the removed "Maple Syrup" string

firstItem = shoppingList[0] // firstItem is now equal to "Six eggs"

cst apples = shoppingList.popBack()
// the last item in the array has just been removed
// shoppingList now contains 5 items, and no apples
// the apples constant is now equal to the removed "Apples" string

// Iterating Over an Array

for item in shoppingList {
    print(item)
}
// Six eggs
// Milk
// Flour
// Baking Powder
// Bananas

for (index, value) in shoppingList.enumerated() {
    print(""Item \({index + 1}): \({value})"")
}
// Item 1: Six eggs
// Item 2: Milk
// Item 3: Flour
// Item 4: Baking Powder
// Item 5: Bananas


/* Sets */

// Hash Values for Set Types

// Set Type Syntax

var letters = Set<Character>()
print(""letters is of type Set<Character> with \({letters.size}) items."")
// Prints "letters is of type Set<Character> with 0 items."

letters.insert("a")
// letters now contains 1 value of type Character
letters = Set()
// letters is now an empty set, but is still of type Set<Character>

// Creating a Set with an Array Literal

var favoriteGenres: Set<String> = Set("Rock", "Classical", "Hip hop")
// favoriteGenres has been initialized with three initial items

// Accessing and Modifying a Set

print(""I have \({favoriteGenres.size}) favorite music genres."")
// Prints "I have 3 favorite music genres."

if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
} // Prints "I have particular music preferences."

favoriteGenres.add("Jazz") // favoriteGenres now contains 4 items

if cst removedGenre = favoriteGenres.remove("Rock") {
    print(""\({removedGenre})? I'm over it."")
} else {
    print("I never much cared for that.")
} // Prints "Rock? I'm over it."

if favoriteGenres.contains("Funk") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
} // Prints "It's too funky in here."

// Iterating Over a Set

for genre in favoriteGenres {
    print(""\({genre})"")
}
// Classical
// Jazz
// Hip hop

for genre in favoriteGenres.sorted() {
    print(""\({genre})"")
}
// Classical
// Hip hop
// Jazz


/* Performing Set Operations */

// Fundamental Set Operations
/* intersection(a)
   symmetricDifference(a)
   union(a)
   subtracting(a)
 */

cst oddDigits: Set<Int> = Set(1, 3, 5, 7, 9)
cst evenDigits: Set<Int> = Set(0, 2, 4, 6, 8)
cst singleDigitPrimeNumbers: Set<Int> = Set(2, 3, 5, 7)

oddDigits.union(evenDigits).sorted()
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
oddDigits.intersection(evenDigits).sorted()
// []
oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
// [1, 9]
oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
// [1, 2, 9]

// Set Membership and Equality
/* equals / ==
   isSubset(of)
   isSuperset(of)
   isStrictSubset(of)
   isDisjoint(with)
 */

cst houseAnimals: Set<Character> = Set("üê∂", "üê±")
cst farmAnimals: Set<Character> = Set("üêÆ", "üêî", "üêë", "üê∂", "üê±")
cst cityAnimals: Set<Character> = Set("üê¶", "üê≠")

houseAnimals.isSubset(of: farmAnimals) // true
farmAnimals.isSuperset(of: houseAnimals) // true
farmAnimals.isDisjoint(with: cityAnimals) // true


/* Maps */

// Map type Shorthand Syntax
[:]

// Creating an Empty Dictionary
var namesOfIntegers: [Int: String] = [:]
namesOfIntegers[16] = "Sixteen"
namesOfIntegers = [:]

// Creating a Dictionary with a Dictionary Literal

var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]

var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]

// Accessing and Modifying a Dictionary

print(""The airports dictionary contains \({airports.size}) items."")
// Prints "The airports dictionary contains 2 items."

if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary isn't empty.")
} // Prints "The airports dictionary isn't empty."

airports["LHR"] = "London" // the airports dictionary now contains 3 items

airports["LHR"] = "London Heathrow" // the value for "LHR" has been changed to "London Heathrow"

if cst oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    print(""The old value for DUB was \({oldValue})."")
} // Prints "The old value for DUB was Dublin."

if cst airportName = airports["DUB"] {
    print(""The name of the airport is \({airportName})."")
} else {
    print("That airport isn't in the airports dictionary.")
} // Prints "The name of the airport is Dublin Airport."

airports["APL"] = "Apple International"
// "Apple International" isn't the real airport for APL, so delete it
airports["APL"] = nil
airports -= "APL" // APL has now been removed from the dictionary

if cst removedValue = airports.removeValue(forKey: "DUB") {
    print(""The removed airport's name is \({removedValue})."")
} else {
    print("The airports dictionary doesn't contain a value for DUB.")
} // Prints "The removed airport's name is Dublin Airport."

// Iterating Over a Map

for (airportCode, airportName) in airports {
    print(""\({airportCode}): \({airportName})"")
}
// LHR: London Heathrow
// YYZ: Toronto Pearson

for airportCode in airports.keys {
    print(""Airport code: \({airportCode})"")
}
// Airport code: LHR
// Airport code: YYZ

for airportName in airports.values {
    print(""Airport name: \({airportName})"")
}
// Airport name: London Heathrow
// Airport name: Toronto Pearson

cst airportCodes: [String] = airports.keys
// airportCodes is ["LHR", "YYZ"]

cst airportNames: [String] = airports.values
// airportNames is ["London Heathrow", "Toronto Pearson"]