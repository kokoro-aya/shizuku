/* For-In Loops */

cst names = ["Anna", "Alex", "Brian", "Jack"]
for name in names {
    print(""Hello, \({name})!"")
}
// Hello, Anna!
// Hello, Alex!
// Hello, Brian!
// Hello, Jack!

cst numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print(""\({animalName})s have \({legCount}) legs"")
}
// cats have 4 legs
// ants have 6 legs
// spiders have 8 legs

for index in 1...5 {
    print(""\({index}) times 5 is \({index * 5})"")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25

cst base = 3
cst power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
print(""\({base}) to the power of \({power}) is \({answer})"")
// Prints "3 to the power of 10 is 59049"

cst minutes = 60
for tickMark in 0..<minutes {
    // render the tick mark each minute (60 times)
}

cst minuteInterval = 5
for tickMark in 0..<minutes @ minuteInterval {
    // render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)
}

cst hours = 12
cst hourInterval = 3
for tickMark in 3...hours @ hourInterval {
    // render the tick mark every 3 hours (3, 6, 9, 12)
}


/* While Loops */

cst finalSquare = 25
var board: [Int] = Array(repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08

var square = 0
var diceRoll = 0
while square < finalSquare {
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // move by the rolled amount
    square += diceRoll
    if square < board.size {
        // if we're still on the board, move up or down for a snake or a ladder
        square += board[square]
    }
}
print("Game over!")

// Repeat-While

cst finalSquare = 25
var board: [Int] = Array(repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
var square = 0
var diceRoll = 0
repeat {
    // move up or down for a snake or ladder
    square += board[square]
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // move by the rolled amount
    square += diceRoll
} while square < finalSquare
print("Game over!")


/* Conditional Statements */

// If

var temperatureInFahrenheit = 30
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} // Prints "It's very cold. Consider wearing a scarf."

temperatureInFahrenheit = 40
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else {
    print("It's not that cold. Wear a t-shirt.")
} // Prints "It's not that cold. Wear a t-shirt."

temperatureInFahrenheit = 90
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else if temperatureInFahrenheit >= 86 {
    print("It's really warm. Don't forget to wear sunscreen.")
} else {
    print("It's not that cold. Wear a t-shirt.")
} // Prints "It's really warm. Don't forget to wear sunscreen."

temperatureInFahrenheit = 72
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else if temperatureInFahrenheit >= 86 {
    print("It's really warm. Don't forget to wear sunscreen.")
}

// Switch

cst someCharacter: Character = "z"
switch someCharacter {
    case "a" => {
        print("The first letter of the alphabet")
    }
    case "z" => {
        print("The last letter of the alphabet")
    }
    default => {
        print("Some other character")
    }
} // Prints "The last letter of the alphabet"

// No Implicit Fallthrough
/*
cst anotherCharacter: Character = "a"
switch anotherCharacter {
    case "a" => // Invalid, the case has an empty body
    case "A" => {
        print("The letter A")
    }
    default {
        print("Not the letter A")
    }
} */
// This will report a compile-time error.

cst anotherCharacter: Character = "a"
switch anotherCharacter {
    case "a", "A" => {
        print("The letter A")
    }
    default => {
        print("Not the letter A")
    }
} // Prints "The letter A"

// Value Binding

cst anotherPoint = Pair(2, 0)
switch anotherPoint {
    case cst (x, 0) => {
        print(""on the x-axis with an x value of \({x})"")
    }
    case cst (0, y) => {
        print(""on the y-axis with a y value of \({y})"")
    }
    case cst (x, y) => { // default case
        print(""somewhere else at \({x}), \({y})"")
    }
} // Prints "on the x-axis with an x value of 2"

// Where

cst yetAnotherPoint = Pair(1, -1)
switch yetAnotherPoint {
    case cst (x, y) where x == y => {
        print(""\({x}), \({y}) is on the line x == y"")
    }
    case cst (x, y) where x == -y => {
        print(""\({x}), \({y}) is on the line x == -y"")
    }
    case cst (x, y) => { // default case
        print(""\({x}), \({y}) is just some arbitrary point"")
    }
} // Prints "(1, -1) is on the line x == -y"

// Compound Cases

cst someCharacter: Character = "e"
switch someCharacter {
    case "a", "e", "i", "o", "u" => {
        print(""\({someCharacter}) is a vowel"")
    }
    case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
         "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z" => {
        print(""\({someCharacter}) is a consonant"")
    }
    default => {
        print(""\({someCharacter}) isn't a vowel or a consonant"")
    }
} // Prints "e is a vowel"

cst stillAnotherPoint = Pair(9, 0)
switch stillAnotherPoint {
    case cst (distance, 0), cst (0, distance) => {
        print("On an axis, \(distance) from the origin")
    }
    default => {
        print("Not on an axis")
    }
} // Prints "On an axis, 9 from the origin"


/* Control Transfer Statements */

// Continue

cst puzzleInput = "great minds think alike"
var puzzleOutput = ""
cst charactersToRemove: [Character] = ["a", "e", "i", "o", "u", " "]
for character in puzzleInput {
    if charactersToRemove.contains(character) {
        continue
    }
    puzzleOutput.append(character)
}
print(puzzleOutput) // Prints "grtmndsthnklk"

//Break
/*
cst numberSymbol: Character = "三"  // Chinese symbol for the number 3
var possibleIntegerValue: Int?
switch numberSymbol {
    case "1", "١", "一", "๑" => {
        possibleIntegerValue = 1
    }
    case "2", "٢", "二", "๒" => {
        possibleIntegerValue = 2
    }
    case "3", "٣", "三", "๓" => {
        possibleIntegerValue = 3
    }
    case "4", "٤", "四", "๔" => {
        possibleIntegerValue = 4
    }
    default => {
        break
    }
}
if cst integerValue = possibleIntegerValue {
    print(""The integer value of \({numberSymbol}) is \({integerValue})."")
} else {
    print(""An integer value couldn't be found for \({numberSymbol})."")
} // Prints "The integer value of 三 is 3." */

// Fallthrough

cst integerToDescribe = 5
var description = ""The number \({integerToDescribe}) is""
switch integerToDescribe {
    case 2, 3, 5, 7, 11, 13, 17, 19 => {
        description += " a prime number, and also"
        :||
    }
    default => {
        description += " an integer."
    }
}
print(description) // Prints "The number 5 is a prime number, and also an integer."