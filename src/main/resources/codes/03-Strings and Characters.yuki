/* String Literals */

cst someString = "some string literal value"

// Special Characters in String Literals
/*
cst wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
cst dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
cst blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
cst sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496
 */

/* Initializing an Empty String */

var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other

if emptyString.isEmpty {
    print("Nothing to see here")
} // Prints "Nothing to see here"


/* String Mutability */

var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

cst constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified


/* Strings Are Value Types */

/* Working with Characters */

for character in "Dog!üê∂" {
    print(character)
}

cst exclamationMark: Character = "!"

cst catCharacters: [Character] = ['C', 'a', 't', '!']
cst catString = String(catCharacters)
print(catString)


/* Concatenating Strings and Characters */

cst string1 = "hello"
cst string2 = " there"
var welcome = string1 ++ string2

var instruction = "look over"
instruction += string2

cst exclamationMark: Character = '!'
welcome.append(exclamationMark)


/* String Interpolation */

cst multiplier = 3
cst message = ""\({multiplier}) times 2.5 is \({Double(multiplier) * 2.5})""


/* Unicode */
/*
cst eAcute: Character = '\u{E9}'                         // √©
cst combinedEAcute: Character = '\u{65}\u{301}'          // e followed by ÃÅ
// eAcute is √©, combinedEAcute is √©

cst precomposed: Character = '\u{D55C}'                  // Ìïú
cst decomposed: Character = '\u{1112}\u{1161}\u{11AB}'   // ·Ñí, ·Ö°, ·Ü´
// precomposed is Ìïú, decomposed is Ìïú

cst enclosedEAcute: Character = '\u{E9}\u{20DD}'
// enclosedEAcute is √©‚Éù

cst regionalIndicatorForUS: Character = '\u{1F1FA}\u{1F1F8}'
// regionalIndicatorForUS is üá∫üá∏
*/


/* Counting Characters */

cst unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print(""unusualMenagerie has \({unusualMenagerie.count}) characters"")
// Prints "unusualMenagerie has 40 characters"

cst word = "cafe"
print(""the number of characters in \({word}) is \({word.count})"")
// Prints "the number of characters in cafe is 4"
/*
word += '\u{301}'    // COMBINING ACUTE ACCENT, U+0301
*/
print(""the number of characters in \({word}) is \({word.count})"")
// Prints "the number of characters in caf√© is 4"


/* Accessing and Modifying a String */

cst greeting = "Guten Tag!"
greeting[0] // G
greeting[^1] // !
greeting.index(after: 0) // u

greeting[^0] // Error
greeting.index(after: greeting.length) // Error

for index in greeting.indices {
  print(""\({greeting[index]})"", terminator: "")
}

// Inserting and Removing

var welcome = "hello"
welcome.insert("!", at: welcome.length)
// welcome now equals "hello!"

welcome.insert(content: " there", at: welcome.length - 1)
// welcome now equals "hello there!"

welcome.remove(at: welcome.length - 1)
// welcome now equals "hello there"

welcome[..^6]
// welcome now equals "hello"


/* Substrings */

cst greeting = "Hello, world!"
cst index = greeting.first(',') ?: greeting.length
cst beginning = greeting[..index]
// beginning is "Hello"

cst newString = String(beginning)


/* Comparing Strings */

cst quotation = "We're a lot alike, you and I."
cst sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    print("These two strings are considered equal")
}
/*
// "Voulez-vous un caf√©?" using LATIN SMALL LETTER E WITH ACUTE
cst eAcuteQuestion = "Voulez-vous un caf\u{E9}?"

// "Voulez-vous un caf√©?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
cst combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"

if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"
*/
/*
cst latinCapitalLetterA: Character = "\u{41}"

cst cyrillicCapitalLetterA: Character = "\u{0410}"

if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters aren't equivalent.")
}
// Prints "These two characters aren't equivalent."
*/

// Prefix and Suffix Equality

cst romeoAndJuliet = [
    "Act 1 Scene 1: Verona, A public place",
    "Act 1 Scene 2: Capulet's mansion",
    "Act 1 Scene 3: A room in Capulet's mansion",
    "Act 1 Scene 4: A street outside Capulet's mansion",
    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
    "Act 2 Scene 1: Outside Capulet's mansion",
    "Act 2 Scene 2: Capulet's orchard",
    "Act 2 Scene 3: Outside Friar Lawrence's cell",
    "Act 2 Scene 4: A street in Verona",
    "Act 2 Scene 5: Capulet's mansion",
    "Act 2 Scene 6: Friar Lawrence's cell"
]

var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1 ") {
        act1SceneCount += 1
    }
}
print(""There are \({act1SceneCount}) scenes in Act 1"")
// Prints "There are 5 scenes in Act 1"

var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        mansionCount += 1
    } else if scene.hasSuffix("Friar Lawrence's cell") {
        cellCount += 1
    }
}
print(""\({mansionCount}) mansion scenes; \({cellCount}) cell scenes"")
// Prints "6 mansion scenes; 2 cell scenes"