/* Defining and Calling Functions */

func greet(person: String): String {
  cst greeting = "Hello, " ++ person ++ "!"
  return greeting
}

print(greet(person: "Anna")) // Prints "Hello, Anna!" // !!! attention to stack overflow
print(greet(person: "Brian")) // Prints "Hello, Brian!"

func greetAgain(person: String): String {
  return "Hello again, " ++ person ++ "!"
}
print(greetAgain(person: "Anna")) // Prints "Hello again, Anna!"


/* Function Parameters and Return Values */

// Functions Without Parameters

func sayHelloWorld(): String {
  return "hello, world"
}
print(sayHelloWorld())

// Functions With Multiple Parameters

func greet(person: String, alreadyGreeted: Bool): String {
    if alreadyGreeted {
        return greetAgain(person: person)
    } else {
        return greet(person: person)
    }
}
print(greet(person: "Tim", alreadyGreeted: true)) // Prints "Hello again, Tim!"

// Functions Without Return Values

func greet(person: String) {
    print(""Hello, \({person})!"")
}
greet(person: "Dave") // Prints "Hello, Dave!"

func printAndCount(string: String): Int {
    print(string)
    return string.size
}
func printWithoutCounting(string: String) {
    cst _ = printAndCount(string: string)
}
printAndCount(string: "hello, world")
// prints "hello, world" and returns a value of 12
printWithoutCounting(string: "hello, world")
// prints "hello, world" but doesn't return a value

// Functions with Multiple Return Values

func minMax(array: [Int]): (min: Int, max: Int) {
  var currentMin = array[0], currentMax = array[0]
  for value in array[1..array.size] {
    if value < currentMin {
      currentMin = value
    } else if value > currentMax {
      currentMax = value
    }
  }
  return (currentMin, currentMax)
}

cst bounds = minMax(array: [8, -6, 2, 109, 3, 71])
print(""min is \({bounds.min}) and max is \({bounds.max})"")
// Prints "min is -6 and max is 109"

// Optional Tuple Return Types

func minMax(array: [Int]): (min: Int, max: Int)? {
    if array.isEmpty { return nil }
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..array.size] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}

if cst bounds = minMax(array: [8,-6,2,109,3,71]) {
  print(""min is \({bounds.min}) and max is \({bounds.max})"")
} // Prints "min is -6 and max is 109"

// Functions With an Implicit Return

func greeting(person: String): String {
  "Hello, " ++ person ++ "!"
}
print(greeting(person: "Dave")) // Prints "Hello, Dave!"

func anotherGreeting(person: String): String {
    return "Hello, " ++ person ++ "!"
}
print(anotherGreeting(person: "Dave")) // Prints "Hello, Dave!"


/* Function Argument Labels and Parameter Names */

func someFunction(firstParameterName: Int, secondParameterName: Int) {
    // ...
}
someFunction(firstParameterName: 1, secondParameterName: 2)

// Omitting Argument Labels

func someFunction(_ firstParameterName: Int, secondParameterName: Int) {
    // ...
}
someFunction(1, secondParameterName: 2)

// Default Parameter Values

func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {
    // ...
}
someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault is 6
someFunction(parameterWithoutDefault: 4) // parameterWithDefault is 12

/* // Variadic Parameters
 */

// Call by Reference Parameters

func swapTwoInts(_ &a: Int, _ &b: Int) {
  cst tmp = a
  a = b
  b = tmp
}

cst someInt = 3, anotherInt = 107
swapTwoInts(&someInt, &anotherInt)
print(""someInt is now \({someInt}), and anotherInt is now \({anotherInt})"") // Prints "someInt is now 107, and anotherInt is now 3"


/* Function Types */

func addTwoInts(_ a: Int, _ b: Int): Int { return a + b }
// Type (Int, Int) -> Int
func multiplyTwoInts(_ a: Int, _ b: Int): Int { return a * b }
// Type (Int, Int) -> Int

func printHelloWorld() { print("hello, world") }
// Type () -> Void

// Using Function Types

var mathFunction: (Int, Int) -> Int = addTwoInts
print(""Result: \({mathFunction(2, 3)})"") // Prints "Result: 5"

mathFunction = multiplyTwoInts
print(""Result: \({mathFunction(2, 3)})"") // Prints "Result: 6"

// Function Types as Parameter Types

func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
  print(""Result: \({mathFunction(a, b)})"")
}
printMathResult(addTwoInts, 3, 5) // Prints "Result: 8"

// Function Types as Return Types

func stepForward(_ input: Int): Int { return input + 1 }
func stepBackward(_ input: Int): Int { return input - 1 }

func chooseStepFunction(backward: Bool): (Int) -> Int {
    return backward ? stepBackward : stepForward
}

var currentValue = 3
cst moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the stepBackward() function

print("Counting to zero:")
// Counting to zero:
while currentValue != 0 {
    print(""\({currentValue})... "")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// 3...
// 2...
// 1...
// zero!


/* Nested Functions */

func chooseStepFunction(backward: Bool): (Int) -> Int {
    func stepForward(input: Int): Int { return input + 1 }
    func stepBackward(input: Int): Int { return input - 1 }
    return backward ? stepBackward : stepForward
}
var currentValue = -4
cst moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    print(""\({currentValue})... "")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!