/* Defining Subscript Function */

subscript(index: Int): Int {
  get { /* Return an appropriate subscript value here */ }
  set(newValue) { /* Perform a suitable setting action here */ }
}

subscript(index: Int): Int {
  /* Return an appropriate subscript value here */
}

struct TimeTable(cst multiplier: Int) {
  subscript(index: Int): Int {
    return multiplier * index
  }
}
cst threeTimesTable = TimesTable(multiplier: 3)
print(""six times three is \({threeTimesTable[6]})"") // Prints "six times three is 18"


/* Subscript Usage */
var numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
numberOfLegs["bird"] = 2


/* Subscript Options */

struct Matrix(cst rows: Int, cst columns: Int) {
  late var grid: [Double]
  init {
    grid = Array(repeating: 0.0, count: rows * columns)
  }
  func indexIsValid(row: Int, column: Int): Bool {
    return row >= 0 && row < rows && column >= 0 && column < columns
  }
  subscript(row: Int, column: Int): Double {
    get {
      assert indexIsValid(row: row, column: column), "Index out of range"
      return grid[(row * columns) + column]
    }
    set {
      assert indexIsValid(row: row, column: column), "Index out of range"
      grid[(row * columns) + column] = newValue
    }
  }
}

var matrix = Matrix(rows: 2, columns: 2)
matrix[0, 1] = 1.5
matrix[1, 0] = 3.2
cst someValue = matrix[2, 2]
// This triggers an assert, because [2, 2] is outside of the matrix bounds.

/* Type Subscripts */

enum Planet::: Int {
  case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
  static subscript(n: Int): Planet {
    return Planet(rawValue: n)!!
  }
}

cst mars = Planet[4]
print(mars)